/**
 * 
 */
package br.framework.db.connectors;

import br.framework.db.management.AUTDBSessionsUsers;

/**
 * 
 * Gerenciamento de configurações globais do sistema
 * 
 * @author Softtek-QA
 *
 */
public class AUTConnectorGlobalConfiguration {
	public static String AUT_MYSQL_SERVER = "localhost"; //Variável global de configuração do IP de serviço para banco de dados MYSQL
	public static String AUT_SQL_SERVER = "localhost"; //Variável global de configuração do IP de serviço para banco de dados MYSQL
	public static String AUT_JAVA_DERBY_SERVER = "localhost"; //Variável global de configuração do IP de serviço para banco de dados MYSQL
	public static String AUT_H2_SERVER = "mphst001"; //Variável global de configuração do IP de serviço para banco de dados MYSQL
	public static String AUT_MYSQL_PORT_CONNECT = "3306"; //Porta de conexão mysql
	public static String AUT_SQL_SERVER_PORT_CONNECT = "1422"; //Porta de conexão sql server
	public static String AUT_JAVA_DERBY_PORT_CONNECT = "65000"; //Porta de conexão java derby
	public static String AUT_JAVA_H2_PORT_CONNECT = "65001"; //porta de conexão java H2
	public AUTConnectorSessions AUT_CONNECTOR_SESSION;
	/**
	 * 
	 * Classe responsável pelo gerenciamento da sessão corrente com o banco de dados
	 * 
	 * 
	 * @author Softtek-QA
	 *
	 */
	public static class AUTConnectorSessions extends AUTDBSessionsUsers{
		public String 		AUT_HOST_DB = "localhost";	
		public Integer 		AUT_HOST_PORT_DB = 3306;
		public String 		AUT_DATA_BASE_NAME = "lry";
		public String 		AUT_USER_LOGIN_DB = "admin";
		public String 		AUT_PWD_LOGIN_DB = "Stk1234!";
				
		/**
		 * 
		 * Comandos para gerenciamento dos parametros de configuração do framework
		 * 
		 * 
		 * @author Softtek-QA
		 *
		 */
		public enum AUT_FRAMEWORK_OPERATIONS{
			AUT_FWK_SELECT_TABLE_INIT_CONFIG;
			
			@Override
			public String toString() {
				// TODO Auto-generated method stub
				switch(this) {
				case AUT_FWK_SELECT_TABLE_INIT_CONFIG:{
					return "SELECT * FROM LRY.AUT_FWK_INIT_CONFIGURATION";
				}
				default:{
					return this.name();
				}
				}
			}
		}
		
		/** 
		 * 
		 * Carrega as configurações de inicialização para sessão a
		 * 
		 * @return java.util.HashMap - Conjunto de parametros de configuração cadastrados no banco de dados
		 * 
		 * 
		 */
		public java.util.HashMap<String,Object> autGetInitConfigFromFWK(){
			try {				
				java.util.HashMap<String,Object> paramsOut = new java.util.HashMap<String,Object>();
				System.out.println("AUT INFO: GET INIT CONFIGURATION FROM FRAMEWORK AUTOMATION");
				autStartNewConnection(AUT_TYPE_SGDB.MYSQL, AUT_HOST_DB, AUT_HOST_PORT_DB, AUT_DATA_BASE_NAME, AUT_USER_LOGIN_DB, AUT_PWD_LOGIN_DB);
							
				return paramsOut;
				
			}
			catch(java.lang.Exception e) {
				System.out.println("AUT ERROR: GET INIT CONFIGURATION  FROM FRAMEWORK AUTOMATION");
				System.out.println(e.getMessage());
				e.printStackTrace();
				
				return null;
			}
		}
		
		
		/**
		 * 
		 * Construtor padrão da classe de gerenciamento de sessões
		 * 
		 */
		public AUTConnectorSessions(){
			super();
		}
	}
	
	/**
	 * 
	 * Comandos pré definidos de configuração do framework de configuração do framework
	 * 
	 * @author Softtek-QA
	 *
	 */
	public enum AUT_GLOBAL_CONFIGURATION{
		MYSQL_SERVER_IP,
		MYSQL_SERVER_PORT,
		MYSQL_SERVER_DATA_BASE_NAME,
		MYSQL_SERVER_DATA_BASE_VALUE,
		DEFAULT_SERVER_IP_NAME,
		DEFAULT_SERVER_PORT_NAME,
		DEFAULT_SERVER_IP_VALUE,
		DEFAULT_SERVER_PORT_VALUE,
		DEFAULT_SERVER_DATA_BASE_NAME,
		DEFAULT_SERVER_DATA_BASE_VALUE,
		DEFAULT_USR_DB,
		DEFAULT_PWD_DB;
		@Override
		public String toString() {
			switch(this) {
			case DEFAULT_USR_DB:{
				return "admin";
			}
			case MYSQL_SERVER_DATA_BASE_NAME:{
				return "lry";
			}
			case DEFAULT_SERVER_DATA_BASE_NAME:{
				return MYSQL_SERVER_DATA_BASE_NAME.name();
			}
			case DEFAULT_SERVER_IP_NAME:{
				return MYSQL_SERVER_IP.name();
			}
			case DEFAULT_SERVER_PORT_NAME:{
				return MYSQL_SERVER_PORT.name();
			}
			case MYSQL_SERVER_IP:{
				return AUT_MYSQL_SERVER;
			}
			case DEFAULT_PWD_DB:{
				return "Auto5@2018";
			}
			case MYSQL_SERVER_PORT:{
				return AUT_MYSQL_PORT_CONNECT;
			}
			case  DEFAULT_SERVER_IP_VALUE:{
				return valueOf(DEFAULT_SERVER_IP_NAME.toString()).toString();
			}
			case DEFAULT_SERVER_PORT_VALUE:{
				return valueOf(DEFAULT_SERVER_PORT_NAME.toString()).toString();
			}
			case DEFAULT_SERVER_DATA_BASE_VALUE:{
				return valueOf(MYSQL_SERVER_DATA_BASE_NAME.name()).toString();
			}
			default:{
				return this.name();
			}
			}
		}
	}
	
	/**
	 * 
	 * Recupera as configurações global de configuração do framework
	 * 
	 * @return java.util.HashMap - Conjunto de parametros de configuração do sistema
	 * 
	 */
	public java.util.HashMap<String,Object> autGetDefaultGlobalConfiguration(){
		try {
			java.util.HashMap<String,Object> paramOut = new java.util.HashMap<String,Object>();

			paramOut.put(AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_IP_NAME.name(), AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_IP_NAME.toString());
			paramOut.put(AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_PORT_NAME.name(), AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_PORT_NAME.toString());
			paramOut.put(AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_DATA_BASE_NAME.name(), AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_DATA_BASE_NAME.toString());
			paramOut.put(AUT_GLOBAL_CONFIGURATION.valueOf(AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_IP_NAME.toString()).name(),AUT_GLOBAL_CONFIGURATION.valueOf(AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_IP_NAME.toString()).toString());
			paramOut.put(AUT_GLOBAL_CONFIGURATION.valueOf(AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_PORT_NAME.toString()).name(),AUT_GLOBAL_CONFIGURATION.valueOf(AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_PORT_NAME.toString()).toString());
			paramOut.put(AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_PORT_VALUE.name(), AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_PORT_VALUE.toString());
			paramOut.put(AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_IP_VALUE.name(), AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_IP_VALUE.toString());
			paramOut.put(AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_DATA_BASE_VALUE.name(), AUT_GLOBAL_CONFIGURATION.DEFAULT_SERVER_DATA_BASE_VALUE.toString());
			
			return paramOut;
		}
		catch(java.lang.Exception e) {
			System.out.println("AUT ERROR: GET DEFAULT CONFIGUTION FROM FRAMEWORK");
			System.out.println(e.getMessage());
			e.printStackTrace();
			
			return null;
		}
	}

	/**
	 * 
	 * Configurações de inicialização do projeto
	 * 
	 */
	public void configInit() {
		AUT_CONNECTOR_SESSION = new AUTConnectorSessions();
	}
	/**
	 *
	 * Construtor padrão
	 * 
	 */
	public AUTConnectorGlobalConfiguration() {
		configInit();
		// TODO Auto-generated constructor stub
	}

}
